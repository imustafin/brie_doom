note
	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"
	generator: "Eiffel Wrapper Generator"

class 
	SDL_PIXELS_FUNCTIONS_API

create 
	default_create

feature -- Access

	sdl_pixel_format_enum_to_masks (format: NATURAL_32; bpp: TYPED_POINTER [INTEGER_32]; rmask: POINTER; gmask: POINTER; bmask: POINTER; amask: POINTER): INTEGER_32
		do
			Result := c_sdl_pixel_format_enum_to_masks (format, bpp, rmask, gmask, bmask, amask)
		ensure
			instance_free: class
		end

	sdl_set_palette_colors (palette: SDL_PALETTE_STRUCT_API; colors: SDL_COLOR_STRUCT_API; firstcolor: INTEGER_32; ncolors: INTEGER_32): INTEGER_32
		do
			Result := c_sdl_set_palette_colors (palette.item, colors.item, firstcolor, ncolors)
		ensure
			instance_free: class
		end

	sdl_map_rgb (format: SDL_PIXEL_FORMAT_STRUCT_API; r: CHARACTER_8; g: CHARACTER_8; b: CHARACTER_8): NATURAL_32
		do
			Result := c_sdl_map_rgb (format.item, r, g, b)
		ensure
			instance_free: class
		end
	
feature -- Externals

	c_sdl_pixel_format_enum_to_masks (format: NATURAL_32; bpp: TYPED_POINTER [INTEGER_32]; rmask: POINTER; gmask: POINTER; bmask: POINTER; amask: POINTER): INTEGER_32
		external
			"C inline use <SDL.h>"
		alias
			"[
				return SDL_PixelFormatEnumToMasks ((Uint32)$format, (int*)$bpp, (Uint32*)$rmask, (Uint32*)$gmask, (Uint32*)$bmask, (Uint32*)$amask);
			]"
		end

	c_sdl_set_palette_colors (palette: POINTER; colors: POINTER; firstcolor: INTEGER_32; ncolors: INTEGER_32): INTEGER_32
		external
			"C inline use <SDL.h>"
		alias
			"[
				return SDL_SetPaletteColors ((SDL_Palette*)$palette, (SDL_Color const*)$colors, (int)$firstcolor, (int)$ncolors);
			]"
		end

	c_sdl_map_rgb (format: POINTER; r: CHARACTER_8; g: CHARACTER_8; b: CHARACTER_8): NATURAL_32
		external
			"C inline use <SDL.h>"
		alias
			"[
				return SDL_MapRGB ((SDL_PixelFormat const*)$format, (Uint8)$r, (Uint8)$g, (Uint8)$b);
			]"
		end
	
end -- class SDL_PIXELS_FUNCTIONS_API
