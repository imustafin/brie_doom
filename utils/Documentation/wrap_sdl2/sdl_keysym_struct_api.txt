note
	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"
	generator: "Eiffel Wrapper Generator"

class 
	SDL_KEYSYM_STRUCT_API

inherit
	MEMORY_STRUCTURE

create 
	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER_32
			-- Size to allocate (in bytes).
		do
			Result := sizeof_external
		end
	
feature -- Member Access

	scancode: INTEGER_32
			-- Access member scancode
		require
			exists: exists
		do
			Result := c_scancode (item)
		ensure
			result_correct: Result = c_scancode (item)
		end

	set_scancode (a_value: INTEGER_32)
			-- Change the value of member scancode to `a_value`.
		require
			exists: exists
		do
			set_c_scancode (item, a_value)
		ensure
			scancode_set: a_value = scancode
		end

	sym: INTEGER_32
			-- Access member sym
		require
			exists: exists
		do
			Result := c_sym (item)
		ensure
			result_correct: Result = c_sym (item)
		end

	set_sym (a_value: INTEGER_32)
			-- Change the value of member sym to `a_value`.
		require
			exists: exists
		do
			set_c_sym (item, a_value)
		ensure
			sym_set: a_value = sym
		end

	mod: NATURAL_32
			-- Access member mod
		require
			exists: exists
		do
			Result := c_mod (item)
		ensure
			result_correct: Result = c_mod (item)
		end

	set_mod (a_value: NATURAL_32)
			-- Change the value of member mod to `a_value`.
		require
			exists: exists
		do
			set_c_mod (item, a_value)
		ensure
			mod_set: a_value = mod
		end

	unused: NATURAL_32
			-- Access member unused
		require
			exists: exists
		do
			Result := c_unused (item)
		ensure
			result_correct: Result = c_unused (item)
		end

	set_unused (a_value: NATURAL_32)
			-- Change the value of member unused to `a_value`.
		require
			exists: exists
		do
			set_c_unused (item, a_value)
		ensure
			unused_set: a_value = unused
		end
	
feature {NONE} -- Implementation wrapper for struct struct SDL_Keysym

	sizeof_external: INTEGER_32
		external
			"C inline use <SDL.h>"
		alias
			"sizeof(struct SDL_Keysym)"
		end

	c_scancode (an_item: POINTER): INTEGER_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Keysym*)$an_item)->scancode
			]"
		end

	set_c_scancode (an_item: POINTER; a_value: INTEGER_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Keysym*)$an_item)->scancode =  (SDL_Scancode)$a_value
			]"
		ensure
			scancode_set: a_value = c_scancode (an_item)
		end

	c_sym (an_item: POINTER): INTEGER_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Keysym*)$an_item)->sym
			]"
		end

	set_c_sym (an_item: POINTER; a_value: INTEGER_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Keysym*)$an_item)->sym =  (SDL_Keycode)$a_value
			]"
		ensure
			sym_set: a_value = c_sym (an_item)
		end

	c_mod (an_item: POINTER): NATURAL_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Keysym*)$an_item)->mod
			]"
		end

	set_c_mod (an_item: POINTER; a_value: NATURAL_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Keysym*)$an_item)->mod =  (Uint16)$a_value
			]"
		ensure
			mod_set: a_value = c_mod (an_item)
		end

	c_unused (an_item: POINTER): NATURAL_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Keysym*)$an_item)->unused
			]"
		end

	set_c_unused (an_item: POINTER; a_value: NATURAL_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Keysym*)$an_item)->unused =  (Uint32)$a_value
			]"
		ensure
			unused_set: a_value = c_unused (an_item)
		end
	
end -- class SDL_KEYSYM_STRUCT_API
