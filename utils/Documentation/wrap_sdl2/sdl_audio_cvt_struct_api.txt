note
	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"
	generator: "Eiffel Wrapper Generator"

class 
	SDL_AUDIO_CVT_STRUCT_API

inherit
	MEMORY_STRUCTURE

create 
	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER_32
			-- Size to allocate (in bytes).
		do
			Result := sizeof_external
		end
	
feature -- Member Access

	needed: INTEGER_32
			-- Access member needed
		require
			exists: exists
		do
			Result := c_needed (item)
		ensure
			result_correct: Result = c_needed (item)
		end

	set_needed (a_value: INTEGER_32)
			-- Change the value of member needed to `a_value`.
		require
			exists: exists
		do
			set_c_needed (item, a_value)
		ensure
			needed_set: a_value = needed
		end

	src_format: NATURAL_32
			-- Access member src_format
		require
			exists: exists
		do
			Result := c_src_format (item)
		ensure
			result_correct: Result = c_src_format (item)
		end

	set_src_format (a_value: NATURAL_32)
			-- Change the value of member src_format to `a_value`.
		require
			exists: exists
		do
			set_c_src_format (item, a_value)
		ensure
			src_format_set: a_value = src_format
		end

	dst_format: NATURAL_32
			-- Access member dst_format
		require
			exists: exists
		do
			Result := c_dst_format (item)
		ensure
			result_correct: Result = c_dst_format (item)
		end

	set_dst_format (a_value: NATURAL_32)
			-- Change the value of member dst_format to `a_value`.
		require
			exists: exists
		do
			set_c_dst_format (item, a_value)
		ensure
			dst_format_set: a_value = dst_format
		end

	rate_incr: REAL_64
			-- Access member rate_incr
		require
			exists: exists
		do
			Result := c_rate_incr (item)
		ensure
			result_correct: Result = c_rate_incr (item)
		end

	set_rate_incr (a_value: REAL_64)
			-- Change the value of member rate_incr to `a_value`.
		require
			exists: exists
		do
			set_c_rate_incr (item, a_value)
		ensure
			rate_incr_set: a_value = rate_incr
		end

	buf: detachable C_STRING
			-- Access member buf
		require
			exists: exists
		do
			if attached c_buf (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_buf (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_buf (a_value: C_STRING)
			-- Change the value of member buf to `a_value`.
		require
			exists: exists
		do
			set_c_buf (item, a_value.item)
		end

	len: INTEGER_32
			-- Access member len
		require
			exists: exists
		do
			Result := c_len (item)
		ensure
			result_correct: Result = c_len (item)
		end

	set_len (a_value: INTEGER_32)
			-- Change the value of member len to `a_value`.
		require
			exists: exists
		do
			set_c_len (item, a_value)
		ensure
			len_set: a_value = len
		end

	len_cvt: INTEGER_32
			-- Access member len_cvt
		require
			exists: exists
		do
			Result := c_len_cvt (item)
		ensure
			result_correct: Result = c_len_cvt (item)
		end

	set_len_cvt (a_value: INTEGER_32)
			-- Change the value of member len_cvt to `a_value`.
		require
			exists: exists
		do
			set_c_len_cvt (item, a_value)
		ensure
			len_cvt_set: a_value = len_cvt
		end

	len_mult: INTEGER_32
			-- Access member len_mult
		require
			exists: exists
		do
			Result := c_len_mult (item)
		ensure
			result_correct: Result = c_len_mult (item)
		end

	set_len_mult (a_value: INTEGER_32)
			-- Change the value of member len_mult to `a_value`.
		require
			exists: exists
		do
			set_c_len_mult (item, a_value)
		ensure
			len_mult_set: a_value = len_mult
		end

	len_ratio: REAL_64
			-- Access member len_ratio
		require
			exists: exists
		do
			Result := c_len_ratio (item)
		ensure
			result_correct: Result = c_len_ratio (item)
		end

	set_len_ratio (a_value: REAL_64)
			-- Change the value of member len_ratio to `a_value`.
		require
			exists: exists
		do
			set_c_len_ratio (item, a_value)
		ensure
			len_ratio_set: a_value = len_ratio
		end

	filters: POINTER
			-- Access member filters
		require
			exists: exists
		do
			Result := c_filters (item)
		ensure
			result_correct: Result = c_filters (item)
		end

	filter_index: INTEGER_32
			-- Access member filter_index
		require
			exists: exists
		do
			Result := c_filter_index (item)
		ensure
			result_correct: Result = c_filter_index (item)
		end

	set_filter_index (a_value: INTEGER_32)
			-- Change the value of member filter_index to `a_value`.
		require
			exists: exists
		do
			set_c_filter_index (item, a_value)
		ensure
			filter_index_set: a_value = filter_index
		end
	
feature {NONE} -- Implementation wrapper for struct struct SDL_AudioCVT

	sizeof_external: INTEGER_32
		external
			"C inline use <SDL.h>"
		alias
			"sizeof(struct SDL_AudioCVT)"
		end

	c_needed (an_item: POINTER): INTEGER_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->needed
			]"
		end

	set_c_needed (an_item: POINTER; a_value: INTEGER_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->needed =  (int)$a_value
			]"
		ensure
			needed_set: a_value = c_needed (an_item)
		end

	c_src_format (an_item: POINTER): NATURAL_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->src_format
			]"
		end

	set_c_src_format (an_item: POINTER; a_value: NATURAL_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->src_format =  (SDL_AudioFormat)$a_value
			]"
		ensure
			src_format_set: a_value = c_src_format (an_item)
		end

	c_dst_format (an_item: POINTER): NATURAL_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->dst_format
			]"
		end

	set_c_dst_format (an_item: POINTER; a_value: NATURAL_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->dst_format =  (SDL_AudioFormat)$a_value
			]"
		ensure
			dst_format_set: a_value = c_dst_format (an_item)
		end

	c_rate_incr (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->rate_incr
			]"
		end

	set_c_rate_incr (an_item: POINTER; a_value: REAL_64)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->rate_incr =  (double)$a_value
			]"
		ensure
			rate_incr_set: a_value = c_rate_incr (an_item)
		end

	c_buf (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->buf
			]"
		end

	set_c_buf (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->buf =  (Uint8*)$a_value
			]"
		ensure
			buf_set: a_value = c_buf (an_item)
		end

	c_len (an_item: POINTER): INTEGER_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->len
			]"
		end

	set_c_len (an_item: POINTER; a_value: INTEGER_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->len =  (int)$a_value
			]"
		ensure
			len_set: a_value = c_len (an_item)
		end

	c_len_cvt (an_item: POINTER): INTEGER_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->len_cvt
			]"
		end

	set_c_len_cvt (an_item: POINTER; a_value: INTEGER_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->len_cvt =  (int)$a_value
			]"
		ensure
			len_cvt_set: a_value = c_len_cvt (an_item)
		end

	c_len_mult (an_item: POINTER): INTEGER_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->len_mult
			]"
		end

	set_c_len_mult (an_item: POINTER; a_value: INTEGER_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->len_mult =  (int)$a_value
			]"
		ensure
			len_mult_set: a_value = c_len_mult (an_item)
		end

	c_len_ratio (an_item: POINTER): REAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->len_ratio
			]"
		end

	set_c_len_ratio (an_item: POINTER; a_value: REAL_64)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->len_ratio =  (double)$a_value
			]"
		ensure
			len_ratio_set: a_value = c_len_ratio (an_item)
		end

	c_filters (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->filters
			]"
		end

	c_filter_index (an_item: POINTER): INTEGER_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->filter_index
			]"
		end

	set_c_filter_index (an_item: POINTER; a_value: INTEGER_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_AudioCVT*)$an_item)->filter_index =  (int)$a_value
			]"
		ensure
			filter_index_set: a_value = c_filter_index (an_item)
		end
	
end -- class SDL_AUDIO_CVT_STRUCT_API
