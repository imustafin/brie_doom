note
	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"
	generator: "Eiffel Wrapper Generator"

class 
	SDL_COLOR_STRUCT_API

inherit
	MEMORY_STRUCTURE

create 
	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER_32
			-- Size to allocate (in bytes).
		do
			Result := sizeof_external
		end
	
feature -- Member Access

	r: CHARACTER_8
			-- Access member r
		require
			exists: exists
		do
			Result := c_r (item)
		ensure
			result_correct: Result = c_r (item)
		end

	set_r (a_value: CHARACTER_8)
			-- Change the value of member r to `a_value`.
		require
			exists: exists
		do
			set_c_r (item, a_value)
		ensure
			r_set: a_value = r
		end

	g: CHARACTER_8
			-- Access member g
		require
			exists: exists
		do
			Result := c_g (item)
		ensure
			result_correct: Result = c_g (item)
		end

	set_g (a_value: CHARACTER_8)
			-- Change the value of member g to `a_value`.
		require
			exists: exists
		do
			set_c_g (item, a_value)
		ensure
			g_set: a_value = g
		end

	b: CHARACTER_8
			-- Access member b
		require
			exists: exists
		do
			Result := c_b (item)
		ensure
			result_correct: Result = c_b (item)
		end

	set_b (a_value: CHARACTER_8)
			-- Change the value of member b to `a_value`.
		require
			exists: exists
		do
			set_c_b (item, a_value)
		ensure
			b_set: a_value = b
		end

	a: CHARACTER_8
			-- Access member a
		require
			exists: exists
		do
			Result := c_a (item)
		ensure
			result_correct: Result = c_a (item)
		end

	set_a (a_value: CHARACTER_8)
			-- Change the value of member a to `a_value`.
		require
			exists: exists
		do
			set_c_a (item, a_value)
		ensure
			a_set: a_value = a
		end
	
feature {NONE} -- Implementation wrapper for struct struct SDL_Color

	sizeof_external: INTEGER_32
		external
			"C inline use <SDL.h>"
		alias
			"sizeof(struct SDL_Color)"
		end

	c_r (an_item: POINTER): CHARACTER_8
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Color*)$an_item)->r
			]"
		end

	set_c_r (an_item: POINTER; a_value: CHARACTER_8)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Color*)$an_item)->r =  (Uint8)$a_value
			]"
		ensure
			r_set: a_value = c_r (an_item)
		end

	c_g (an_item: POINTER): CHARACTER_8
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Color*)$an_item)->g
			]"
		end

	set_c_g (an_item: POINTER; a_value: CHARACTER_8)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Color*)$an_item)->g =  (Uint8)$a_value
			]"
		ensure
			g_set: a_value = c_g (an_item)
		end

	c_b (an_item: POINTER): CHARACTER_8
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Color*)$an_item)->b
			]"
		end

	set_c_b (an_item: POINTER; a_value: CHARACTER_8)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Color*)$an_item)->b =  (Uint8)$a_value
			]"
		ensure
			b_set: a_value = c_b (an_item)
		end

	c_a (an_item: POINTER): CHARACTER_8
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Color*)$an_item)->a
			]"
		end

	set_c_a (an_item: POINTER; a_value: CHARACTER_8)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_Color*)$an_item)->a =  (Uint8)$a_value
			]"
		ensure
			a_set: a_value = c_a (an_item)
		end
	
end -- class SDL_COLOR_STRUCT_API
