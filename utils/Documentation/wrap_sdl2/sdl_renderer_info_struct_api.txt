note
	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"
	generator: "Eiffel Wrapper Generator"

class 
	SDL_RENDERER_INFO_STRUCT_API

inherit
	MEMORY_STRUCTURE

create 
	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER_32
			-- Size to allocate (in bytes).
		do
			Result := sizeof_external
		end
	
feature -- Member Access

	name: detachable C_STRING
			-- Access member name
		require
			exists: exists
		do
			if attached c_name (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_name (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_name (a_value: C_STRING)
			-- Change the value of member name to `a_value`.
		require
			exists: exists
		do
			set_c_name (item, a_value.item)
		end

	flags: NATURAL_32
			-- Access member flags
		require
			exists: exists
		do
			Result := c_flags (item)
		ensure
			result_correct: Result = c_flags (item)
		end

	set_flags (a_value: NATURAL_32)
			-- Change the value of member flags to `a_value`.
		require
			exists: exists
		do
			set_c_flags (item, a_value)
		ensure
			flags_set: a_value = flags
		end

	num_texture_formats: NATURAL_32
			-- Access member num_texture_formats
		require
			exists: exists
		do
			Result := c_num_texture_formats (item)
		ensure
			result_correct: Result = c_num_texture_formats (item)
		end

	set_num_texture_formats (a_value: NATURAL_32)
			-- Change the value of member num_texture_formats to `a_value`.
		require
			exists: exists
		do
			set_c_num_texture_formats (item, a_value)
		ensure
			num_texture_formats_set: a_value = num_texture_formats
		end

	texture_formats: POINTER
			-- Access member texture_formats
		require
			exists: exists
		do
			Result := c_texture_formats (item)
		ensure
			result_correct: Result = c_texture_formats (item)
		end

	max_texture_width: INTEGER_32
			-- Access member max_texture_width
		require
			exists: exists
		do
			Result := c_max_texture_width (item)
		ensure
			result_correct: Result = c_max_texture_width (item)
		end

	set_max_texture_width (a_value: INTEGER_32)
			-- Change the value of member max_texture_width to `a_value`.
		require
			exists: exists
		do
			set_c_max_texture_width (item, a_value)
		ensure
			max_texture_width_set: a_value = max_texture_width
		end

	max_texture_height: INTEGER_32
			-- Access member max_texture_height
		require
			exists: exists
		do
			Result := c_max_texture_height (item)
		ensure
			result_correct: Result = c_max_texture_height (item)
		end

	set_max_texture_height (a_value: INTEGER_32)
			-- Change the value of member max_texture_height to `a_value`.
		require
			exists: exists
		do
			set_c_max_texture_height (item, a_value)
		ensure
			max_texture_height_set: a_value = max_texture_height
		end
	
feature {NONE} -- Implementation wrapper for struct struct SDL_RendererInfo

	sizeof_external: INTEGER_32
		external
			"C inline use <SDL.h>"
		alias
			"sizeof(struct SDL_RendererInfo)"
		end

	c_name (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_RendererInfo*)$an_item)->name
			]"
		end

	set_c_name (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_RendererInfo*)$an_item)->name =  (char const*)$a_value
			]"
		ensure
			name_set: a_value = c_name (an_item)
		end

	c_flags (an_item: POINTER): NATURAL_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_RendererInfo*)$an_item)->flags
			]"
		end

	set_c_flags (an_item: POINTER; a_value: NATURAL_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_RendererInfo*)$an_item)->flags =  (Uint32)$a_value
			]"
		ensure
			flags_set: a_value = c_flags (an_item)
		end

	c_num_texture_formats (an_item: POINTER): NATURAL_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_RendererInfo*)$an_item)->num_texture_formats
			]"
		end

	set_c_num_texture_formats (an_item: POINTER; a_value: NATURAL_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_RendererInfo*)$an_item)->num_texture_formats =  (Uint32)$a_value
			]"
		ensure
			num_texture_formats_set: a_value = c_num_texture_formats (an_item)
		end

	c_texture_formats (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_RendererInfo*)$an_item)->texture_formats
			]"
		end

	c_max_texture_width (an_item: POINTER): INTEGER_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_RendererInfo*)$an_item)->max_texture_width
			]"
		end

	set_c_max_texture_width (an_item: POINTER; a_value: INTEGER_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_RendererInfo*)$an_item)->max_texture_width =  (int)$a_value
			]"
		ensure
			max_texture_width_set: a_value = c_max_texture_width (an_item)
		end

	c_max_texture_height (an_item: POINTER): INTEGER_32
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_RendererInfo*)$an_item)->max_texture_height
			]"
		end

	set_c_max_texture_height (an_item: POINTER; a_value: INTEGER_32)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <SDL.h>"
		alias
			"[
				((struct SDL_RendererInfo*)$an_item)->max_texture_height =  (int)$a_value
			]"
		ensure
			max_texture_height_set: a_value = c_max_texture_height (an_item)
		end
	
end -- class SDL_RENDERER_INFO_STRUCT_API
