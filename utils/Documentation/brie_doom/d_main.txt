note
	description: "[
		d_main.c
		DOOM main program (D_DoomMain) and game loop (D_DoomLoop),
		plus functions to determine game mode (shareware, registered),
		parse command line parameters, configure game parameters (turbo),
		and call the startup functions.
	]"

class 
	D_MAIN

create 
	make

feature 

	i_main: I_MAIN

	wadfiles: LIST [STRING_8]

	make (a_i_main: I_MAIN)
		do
			i_main := a_i_main
			create {LINKED_LIST [STRING_8]} wadfiles.make
			pagename := ""
		end
	
feature 

	startskill: INTEGER_32

	startepisode: INTEGER_32

	startmap: INTEGER_32

	autostart: BOOLEAN

	Singletics: BOOLEAN = True
			-- debug flag to cancel adaptiveness

	debugfile: detachable FILE
	
feature -- DEMO LOOP

	demosequence: INTEGER_32

	pagetic: INTEGER_32

	pagename: STRING_8
	
feature 

	devparm: BOOLEAN assign set_devparm
			-- started game with -devparm

	set_devparm (a_devparm: like devparm)
		do
			devparm := a_devparm
		end

	nomonsters: BOOLEAN assign set_nomonsters
			-- checkparm of -nomonsters

	set_nomonsters (a_nomonsters: like nomonsters)
		do
			nomonsters := a_nomonsters
		end

	respawnparm: BOOLEAN assign set_respawnparm
			-- checkparm of -respawn

	set_respawnparm (a_respawnparm: like respawnparm)
		do
			respawnparm := a_respawnparm
		end

	fastparm: BOOLEAN assign set_fastparm
			-- checkparm of -fast

	set_fastparm (a_fastparm: like fastparm)
		do
			fastparm := a_fastparm
		end
	
feature 

	d_doommain
		do
			findresponsefile
			identifyversion
			if i_main.Doomstat_h.gamemode = {GAME_MODE_T}.shareware then
				print ("            DOOM Shareware Startup%N")
				print ("V_Init: allocate screens.%N")
				i_main.V_video.v_init
				print ("M_LoadDefaults: Load system defauls.%N")
				i_main.M_misc.m_loaddefaults
				print ("Z_Init: Init zone memory allocation daemon.%N")
				i_main.Z_zone.z_init
				print ("W_Init: Init WADfiles.%N")
				i_main.W_wad.w_initmultiplefiles (wadfiles)
				print ("added%N")
				print ("==================%N")
				print ("   Shareware!%N")
				print ("==================%N")
				print ("M_Init: Init miscellaneous info.%N")
				i_main.M_menu.m_init
				print ("R_Init: Init DOOM refresh daemon - ")
				i_main.R_main.r_init
				print ("%NP_Init: Init Playloop state.%N")
				i_main.P_setup.p_init
				print ("I_Init: Setting up machine state.%N")
				i_main.I_system.i_init
				print ("D_CheckNetGame: Checking network game status.%N")
				i_main.D_net.d_checknetgame
				print ("S_Init: Setting up sound.%N")
				i_main.S_sound.s_init (i_main.S_sound.snd_sfxvolume * 8, i_main.S_sound.snd_musicvolume * 8)
				print ("HU_Init: Setting up heads up display.%N")
				i_main.Hu_stuff.hu_init
				print ("ST_Init: Init status bar.%N")
				i_main.St_stuff.st_init
				startskill := {DOOMDEF_H}.sk_medium
				startepisode := 1
				startmap := 1
				autostart := False
				if i_main.G_game.gameaction /= i_main.G_game.Ga_loadgame then
					if autostart or i_main.G_game.netgame then
						i_main.G_game.g_initnew (startskill, startepisode, startmap)
					else
						d_starttitle
					end
				end
				d_doomloop
			end
		end

	d_starttitle
		do
			i_main.G_game.gameaction := {G_GAME}.ga_nothing
			demosequence := -1
			d_advancedemo
		end

	advancedemo: BOOLEAN

	d_advancedemo
			-- Called after each demo or intro demosequence finishes
		do
			advancedemo := True
		end

	findresponsefile
		do
		end

	identifyversion
		do
			i_main.Doomstat_h.gamemode := {GAME_MODE_T}.shareware
			d_addfile ("doom1.wad")
		end

	d_addfile (a_wadfile: STRING_8)
		do
			wadfiles.extend (a_wadfile)
		end
	
feature -- D_DoomLoop

	d_doomloop
		do
			if i_main.G_game.demorecording then
				i_main.G_game.g_beginrecording
			end
			check
					attached i_main.I_video as iv
			then
				iv.i_initgraphics
			end
			from
			until
				False
			loop
				d_runframe
			end
		end

	wipestart: INTEGER_32

	wipe: BOOLEAN

	d_runframe
		local
			nowtime: INTEGER_32
			tics: INTEGER_32
		do
			if wipe then
				from
					tics := 0
				until
					tics > 0
				loop
					nowtime := i_main.I_system.i_gettime
					tics := nowtime - wipestart
					i_main.I_system.i_sleep (1)
				end
				wipestart := nowtime
				wipe := not i_main.F_wipe.wipe_screenwipe ({F_WIPE}.wipe_melt, 0, 0, {DOOMDEF_H}.screenwidth, {DOOMDEF_H}.screenheight, tics)
				i_main.I_video.i_updatenoblit
				i_main.M_menu.m_drawer
				i_main.I_video.i_finishupdate
			else
				print ("DOOM LOOP GAMETIC: " + i_main.G_game.gametic.out + ", state " + i_main.G_game.gamestate.out + "%N")
				i_main.I_video.i_startframe
				if Singletics then
					i_main.I_video.i_starttic
					d_processevents
					i_main.G_game.g_buildticcmd (i_main.D_net.Netcmds [i_main.G_game.consoleplayer] [i_main.D_net.maketic \\ {D_NET}.backuptics])
					if advancedemo then
						d_doadvancedemo
					end
					i_main.M_menu.m_ticker
					i_main.G_game.g_ticker
					i_main.G_game.gametic := i_main.G_game.gametic + 1
					i_main.D_net.maketic := i_main.D_net.maketic + 1
				else
					i_main.D_net.tryruntics
				end
				i_main.S_sound.s_updatesounds (i_main.G_game.Players [i_main.G_game.consoleplayer].mo)
				if i_main.I_video.Screenvisible and not i_main.G_game.nodrawers then
					wipe := i_main.D_display.d_display
					if wipe then
						i_main.F_wipe.wipe_endscreen (0, 0, {DOOMDEF_H}.screenwidth, {DOOMDEF_H}.screenheight)
						wipestart := i_main.I_system.i_gettime - 1
					else
						i_main.I_video.i_finishupdate
					end
				end
			end
		end

	d_processevents
			-- Send all the events of the given timestamp down the responder chain
		local
			event: EVENT_T
			res: BOOLEAN
		do
			if i_main.Doomstat_h.gamemode = {GAME_MODE_T}.commercial and i_main.W_wad.w_checknumforname ("map01") < 0 then
			else
				from
				until
					eventtail = eventhead
				loop
					event := Events [eventtail]
					if not i_main.M_menu.m_responder (event) then
						res := i_main.G_game.g_responder (event)
					end
					eventtail := (eventtail + 1).bit_and ({D_EVENT}.maxevents - 1)
				end
			end
		end

	d_doadvancedemo
			-- This cycles through the demo sequences.
			-- FIXME - version dependend demo numbers?
		do
			i_main.G_game.Players [i_main.G_game.consoleplayer].playerstate := {PLAYER_T}.pst_live
			advancedemo := False
			i_main.G_game.usergame := False
			i_main.G_game.paused := False
			i_main.G_game.gameaction := {G_GAME}.ga_nothing
			if i_main.Doomstat_h.gamemode = {GAME_MODE_T}.retail then
				demosequence := (demosequence + 1) \\ 7
			else
				demosequence := (demosequence + 1) \\ 6
			end
			inspect demosequence
			when 0 then
				if i_main.Doomstat_h.gamemode = {GAME_MODE_T}.commercial then
					pagetic := 35 * 11
				else
					pagetic := 170
				end
				i_main.G_game.gamestate := {DOOMDEF_H}.gs_demoscreen
				pagename := "TITLEPIC"
				if i_main.Doomstat_h.gamemode = {GAME_MODE_T}.commercial then
					i_main.S_sound.s_startmusic ({SOUNDS_H}.mus_dm2ttl)
				else
					i_main.S_sound.s_startmusic ({SOUNDS_H}.mus_intro)
				end
			when 1 then
				i_main.G_game.g_deferedplaydemo ("demo1")
			when 2 then
				pagetic := 200
				i_main.G_game.gamestate := {DOOMDEF_H}.gs_demoscreen
				pagename := "CREDIT"
			when 3 then
				i_main.G_game.g_deferedplaydemo ("demo2")
			when 4 then
				i_main.G_game.gamestate := {DOOMDEF_H}.gs_demoscreen
				if i_main.Doomstat_h.gamemode = {GAME_MODE_T}.commercial then
					pagetic := 35 * 11
					pagename := "TITLEPIC"
					i_main.S_sound.s_startmusic ({SOUNDS_H}.mus_dm2ttl)
				else
					pagetic := 200
					if i_main.Doomstat_h.gamemode = {GAME_MODE_T}.retail then
						pagename := "CREDIT"
					else
						pagename := "HELP2"
					end
				end
			when 5 then
				i_main.G_game.g_deferedplaydemo ("demo3")
			when 6 then
				i_main.G_game.g_deferedplaydemo ("demo4")
			else
			end
		end
	
feature -- EVENT HANDLING
-- Events are asynchronous inputs generally generated by the game user.
-- Events can be discarded if no responder claims them

	Events: ARRAY [EVENT_T]
		once
			create Result.make_filled (create {EVENT_T}.make, 0, {D_EVENT}.maxevents)
		end

	eventhead: INTEGER_32

	eventtail: INTEGER_32

	d_postevent (event: EVENT_T)
		do
			Events [eventhead] := event
			eventhead := (eventhead + 1).bit_and ({D_EVENT}.maxevents - 1)
		ensure
			advanced_if_there_was_space: old eventhead < {D_EVENT}.maxevents - 1 implies eventhead = old eventhead + 1
			wrapped_if_there_was_no_space: old eventhead = {D_EVENT}.maxevents - 1 implies eventhead = 0
		end

	d_pageticker
			-- Handles timing for warped projection
		do
			pagetic := pagetic - 1
			if pagetic < 0 then
				d_advancedemo
			end
		end
	
end -- class D_MAIN
