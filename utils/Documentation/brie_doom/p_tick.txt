note
	description: "[
		p_tick.c
		Archiving: SaveGame I/O.
		Thinker, Ticker.
	]"

class 
	P_TICK

create 
	make

feature 

	i_main: I_MAIN

	make (a_i_main: like i_main)
		do
			i_main := a_i_main
			create thinkers.make
		end
	
feature 

	thinkers: LINKED_LIST [WITH_THINKER]

	leveltime: INTEGER_32 assign set_leveltime

	set_leveltime (a_leveltime: like leveltime)
		do
			leveltime := a_leveltime
		end
	
feature 

	p_initthinkers
		do
			thinkers.wipe_out
		end

	p_addthinker (thinker: WITH_THINKER)
			-- Adds a new thinker at the end of the list
		do
			thinkers.force (thinker)
		end

	p_removethinker (thinker: WITH_THINKER)
		do
			thinkers.start
			thinkers.prune (thinker)
		ensure
				across
					old thinkers as ots
				some
					ots.item = thinker
				end implies old thinkers.count = thinkers.count + 1
				across
					old thinkers as ots
				all
					ots.item /= thinker
				end implies old thinkers ~ thinkers
		end

	p_ticker
		local
			i: INTEGER_32
		do
			if i_main.G_game.paused then
			else
				if not i_main.G_game.netgame and i_main.M_menu.menuactive and not i_main.G_game.demoplayback and i_main.G_game.Players [i_main.G_game.consoleplayer].viewz /= create {FIXED_T}.from_integer (1) then
				else
					from
						i := 0
					until
						i >= {DOOMDEF_H}.maxplayers
					loop
						if i_main.G_game.Playeringame [i] then
							i_main.P_user.p_playerthink (i_main.G_game.Players [i])
						end
						i := i + 1
					end
					p_runthinkers
					i_main.P_spec.p_updatespecials
					i_main.P_mobj.p_respawnspecials
					leveltime := leveltime + 1
				end
			end
		end

	p_runthinkers
		local
			currentthinker: THINKER_T
		do
			from
				thinkers.start
			until
				thinkers.exhausted
			loop
				if attached thinkers.item.thinker.function as function then
					function.call
					if not thinkers.after then
						thinkers.forth
					end
				else
					thinkers.remove
				end
			end
		end
	
end -- class P_TICK
