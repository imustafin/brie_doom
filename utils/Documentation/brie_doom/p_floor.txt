note
	description: "[
		p_floor.c
		
		Floor animation: raising stairs.
	]"

class 
	P_FLOOR

create 
	make

feature 

	i_main: I_MAIN

	make (a_i_main: like i_main)
		do
			i_main := a_i_main
		end
	
feature 

	ev_buildstairs (line: LINE_T; type: INTEGER_32): BOOLEAN
			-- BUILD A STAIRCASE!
		do
			{I_MAIN}.i_error ("EV_BuildStairs not implemented")
		ensure
			instance_free: class
		end

	ev_dofloor (line: LINE_T; type: INTEGER_32): BOOLEAN
			-- HANDLE FLOOR TYPES
		do
			{I_MAIN}.i_error ("EV_DoFloor not implemented")
		ensure
			instance_free: class
		end

	t_moveplane (sector: SECTOR_T; speed, dest: FIXED_T; crush: BOOLEAN; floororceiling, direction: INTEGER_32): RESULT_E
			-- Move a plane (floor or ceiling) and check for crushing
		local
			flag: BOOLEAN
			lastpos: FIXED_T
			returned: BOOLEAN
		do
			if floororceiling = 0 then
				if direction = -1 then
					if sector.floorheight - speed < dest then
						lastpos := sector.floorheight
						sector.floorheight := dest
						flag := i_main.P_map.p_changesector (sector, crush)
						if flag then
							sector.floorheight := lastpos
							i_main.P_map.p_changesector (sector, crush).do_nothing
						end
						Result := {RESULT_E}.pastdest
						returned := True
					else
						lastpos := sector.floorheight
						sector.floorheight := sector.floorheight - speed
						flag := i_main.P_map.p_changesector (sector, crush)
						if flag then
							sector.floorheight := lastpos
							i_main.P_map.p_changesector (sector, crush).do_nothing
							Result := {RESULT_E}.crushed
							returned := True
						end
					end
				elseif direction = 1 then
					if sector.floorheight + speed > dest then
						lastpos := sector.floorheight
						sector.floorheight := dest
						flag := i_main.P_map.p_changesector (sector, crush)
						if flag then
							sector.floorheight := lastpos
							i_main.P_map.p_changesector (sector, crush).do_nothing
						end
						Result := {RESULT_E}.pastdest
						returned := True
					else
						lastpos := sector.floorheight
						sector.floorheight := sector.floorheight + speed
						flag := i_main.P_map.p_changesector (sector, crush)
						if flag then
							if not crush then
								sector.floorheight := lastpos
								i_main.P_map.p_changesector (sector, crush).do_nothing
							end
							Result := {RESULT_E}.crushed
							returned := True
						end
					end
				end
			elseif floororceiling = 1 then
				if direction = -1 then
					if sector.ceilingheight - speed < dest then
						lastpos := sector.ceilingheight
						sector.ceilingheight := dest
						flag := i_main.P_map.p_changesector (sector, crush)
						if flag then
							sector.ceilingheight := lastpos
							i_main.P_map.p_changesector (sector, crush).do_nothing
						end
						Result := {RESULT_E}.pastdest
						returned := True
					else
						lastpos := sector.ceilingheight
						sector.ceilingheight := sector.ceilingheight - speed
						flag := i_main.P_map.p_changesector (sector, crush)
						if flag then
							if not crush then
								sector.ceilingheight := lastpos
								i_main.P_map.p_changesector (sector, crush).do_nothing
							end
							Result := {RESULT_E}.crushed
							returned := True
						end
					end
				elseif direction = 1 then
					if sector.ceilingheight + speed > dest then
						lastpos := sector.ceilingheight
						sector.ceilingheight := dest
						flag := i_main.P_map.p_changesector (sector, crush)
						if flag then
							sector.ceilingheight := lastpos
							i_main.P_map.p_changesector (sector, crush).do_nothing
						end
						Result := {RESULT_E}.pastdest
						returned := True
					else
						lastpos := sector.ceilingheight
						sector.ceilingheight := sector.ceilingheight + speed
						flag := i_main.P_map.p_changesector (sector, crush)
					end
				end
			end
			if not returned then
				Result := {RESULT_E}.ok
			end
		end
	
end -- class P_FLOOR
